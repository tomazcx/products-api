basePath: /
definitions:
  dto.AccessTokenDTO:
    properties:
      access_token:
        type: string
    type: object
  dto.AuthDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.ProductDTO:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: tomazcx06@gmail.com
    name: Tomaz C. Xavier
    url: http://www.tomazcx.site
  description: CRUD of products with user authentication.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Products API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Send the desired page, limit and sort operation to list the products.
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Sort
        in: query
        name: sort
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get many products with pagination
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Send the product data to register it in the database.
      parameters:
      - description: Product Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a product entity
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Send the product ID to delete it.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete the product data
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Send the product ID to retrieve all its data.
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get a product data based on the ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Send the product data and its ID to update.
      parameters:
      - description: Product Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update the product data
      tags:
      - Products
  /users:
    post:
      consumes:
      - application/json
      description: Create an user
      parameters:
      - description: Create User DTO
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: Create an user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate with email and password to get a token
      parameters:
      - description: Auth  DTO
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccessTokenDTO'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Authenticate
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
